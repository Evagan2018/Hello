# Model version: 11.26.11
# Parameters:
# instance.parameter=value       #(type, mode) default = 'def value' : description : [min..max]
#----------------------------------------------------------------------------------------------

fvp_mps2.mps2_timer0.clk_div.div=1                    # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_timer0.clk_div.mul=1                    # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_timer1.clk_div.div=1                    # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.mps2_timer1.clk_div.mul=1                    # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA

fvp_mps2.mps2_visualisation.disable-visualisation=0   # (bool  , init-time) default = '0'      : Enable/disable visualisation
fvp_mps2.mps2_visualisation.idler.has_gui=1           # (bool  , init-time) default = '1'      : GUI is enabled
fvp_mps2.mps2_visualisation.rate_limit-enable=1       # (bool  , init-time) default = '0'      : Rate limit simulation.
fvp_mps2.mps2_visualisation.idler.delay_ms=50         # (int   , init-time) default = '0x32'   : Determines the period, in milliseconds of real time, between gui_callback() calls.
fvp_mps2.mps2_visualisation.window_title=CLCD %cpu%   # (string, init-time) default = 'CLCD %cpu%' : Window title (%cpu% is replaced by cpu_name)

fvp_mps2.UART0.clk_divider.div=1                      # (int   , init-time) default = '0x1'    : Clock Rate Divider. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART0.clk_divider.mul=1                      # (int   , init-time) default = '0x1'    : Clock Rate Multiplier. This parameter is not exposed via CADI and can only be set in LISA
fvp_mps2.UART0.in_file=                               # (string, init-time) default = ''       : Input file for data to be read by the UART
fvp_mps2.UART0.in_file_escape_sequence=##             # (string, init-time) default = '##'     : Input file escape sequence
fvp_mps2.UART0.out_file=                              # (string, init-time) default = ''       : Output file to hold data written by the UART (use '-' to send all output to stdout)
fvp_mps2.UART0.rx_overrun_mode=2                      # (int   , init-time) default = '0x2'    : Block receive on RX_OVERRUN - 0:Never; 1:Before overrun; 2:After overrun
fvp_mps2.UART0.shutdown_on_eot=0                      # (bool  , init-time) default = '0'      : Shutdown simulation when a EOT (ASCII 4) char is transmitted (useful for regression tests when semihosting is not available)
fvp_mps2.UART0.shutdown_tag=                          # (string, run-time ) default = ''       : Shutdown simulation when a string is transmitted
fvp_mps2.UART0.unbuffered_output=0                    # (bool  , init-time) default = '0'      : Unbuffered output

REMOTE_CONNECTION.CADIServer.enable_remote_cadi=0      # (bool  , init-time) default = '0'      : Allow connections from remote hosts
REMOTE_CONNECTION.CADIServer.listen_address=127.0.0.1  # (string, init-time) default = '127.0.0.1' : If enable_remote_cadi is set, the network address the server listens on. The default is 127.0.0.1
REMOTE_CONNECTION.CADIServer.port=31627                # (int   , init-time) default = '0x7b8b' : If enable_remote_cadi is set, the TCP port the server listens on. The default is 31627
REMOTE_CONNECTION.CADIServer.range=0                   # (int   , init-time) default = '0x0'    : If the requested port is not available, search for the next available port in the range [port:port+range]. The default is zero, which means only try the requested port.

TRACE.UnpredArchMsg.enable=0                          # (bool  , init-time) default = '0'      : Enable automatic printing of unpredictable behaviour warnings
armcortexm0plusct.BIGENDINIT=0                        # (bool  , init-time) default = '0'      : Initialize processor to big endian mode
armcortexm0plusct.BKPT=4                              # (int   , init-time) default = '0x4'    : Number of breakpoint unit comparators implemented
armcortexm0plusct.DBG=1                               # (bool  , init-time) default = '1'      : Set whether debug extensions are implemented
armcortexm0plusct.IOP=0                               # (bool  , init-time) default = '0'      : Send all d-side transactions to the port, io_port_out. Transactions which do not match should be returned to the port, io_port_in
armcortexm0plusct.IRQDIS=0                            # (int   , init-time) default = '0x0'    : IRQ line disable mask. Bit n of this 32-bit parameter disables IRQ[n]
armcortexm0plusct.NUM_IRQ=32                          # (int   , init-time) default = '0x20'   : Number of user interrupts
armcortexm0plusct.NUM_MPU_REGION=0                    # (int   , init-time) default = '0x0'    : Number of MPU regions
armcortexm0plusct.SYST=1                              # (bool  , init-time) default = '1'      : Enable support for SysTick timer functionality
armcortexm0plusct.USER=0                              # (bool  , init-time) default = '0'      : Enable support for Unprivileged/Privileged Extension
armcortexm0plusct.VTOR=0                              # (bool  , init-time) default = '0'      : Include Vector Table Offset Register
armcortexm0plusct.WIC=0                               # (bool  , init-time) default = '1'      : Include support for WIC-mode deep sleep
armcortexm0plusct.WPT=0                               # (int   , init-time) default = '0x2'    : Number of watchpoint unit comparators implemented
armcortexm0plusct.cpi_div=1                           # (int   , run-time ) default = '0x1'    : divider for calculating CPI (Cycles Per Instruction)
armcortexm0plusct.cpi_mul=1                           # (int   , run-time ) default = '0x1'    : multiplier for calculating CPI (Cycles Per Instruction)
armcortexm0plusct.master_id=0                         # (int   , init-time) default = '0x0'    : Master ID presented in bus transactions
armcortexm0plusct.min_sync_level=0                    # (int   , run-time ) default = '0x0'    : force minimum syncLevel (0=off=default, 1=syncState, 2=postInsnIO, 3=postInsnAll)
armcortexm0plusct.reported_patch_level=-1             # (int   , init-time) default = '0xffffffffffffffff' : Purely cosmetic patch level value to be displayed from the CPUID register. This value will not necessarily align with the model behaviour. The default value (-1) will see this parameter ignored.
armcortexm0plusct.reported_revision_number=-1         # (int   , init-time) default = '0xffffffffffffffff' : Purely cosmetic revision number value to be displayed from the CPUID register. This value will not necessarily align with the model behaviour. The default value (-1) will see this parameter ignored.

armcortexm0plusct.semihosting-Thumb_SVC=171           # (int   , init-time) default = '0xab'   : T32 SVC number for semihosting
armcortexm0plusct.semihosting-cmd_line=               # (string, init-time) default = ''       : Command line available to semihosting SVC calls
armcortexm0plusct.semihosting-cwd=                    # (string, init-time) default = ''       : Base directory for semihosting file access.
armcortexm0plusct.semihosting-enable=1                # (bool  , init-time) default = '1'      : Enable semihosting SVC traps. Applications that do not use semihosting must set this parameter to false.
armcortexm0plusct.semihosting-heap_base=0             # (int   , init-time) default = '0x0'    : Virtual address of heap base
armcortexm0plusct.semihosting-heap_limit=544210944    # (int   , init-time) default = '0x20700000' : Virtual address of top of heap
armcortexm0plusct.semihosting-stack_base=545259520    # (int   , init-time) default = '0x20800000' : Virtual address of base of descending stack
armcortexm0plusct.semihosting-stack_limit=544210944   # (int   , init-time) default = '0x20700000' : Virtual address of stack limit

fvp_mps2.telnetterminal0.mode=telnet                  # (string, init-time) default = 'telnet' : Terminal initialisation mode
fvp_mps2.telnetterminal0.quiet=1                      # (bool  , init-time) default = '0'      : Avoid output on stdout/stderr
fvp_mps2.telnetterminal0.start_port=5000              # (int   , init-time) default = '0x1388' : Telnet TCP Port Number
fvp_mps2.telnetterminal0.start_telnet=1               # (bool  , init-time) default = '1'      : Start telnet if nothing connected
fvp_mps2.telnetterminal0.terminal_command=            # (string, init-time) default = ''       : Commandline to launch a terminal application and connect to the opened TCP port. Keywords %port and %title will be replaced with the opened port number and component name respectively. An empty string (default behaviour) will launch xterm (Linux) or telnet.exe (Windows)

#----------------------------------------------------------------------------------------------